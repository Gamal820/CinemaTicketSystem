// <auto-generated />
using System;
using CinemaTicketSystem.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaTicketSystem.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaTicketSystem.Models.Actor", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Bio")
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Img")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.ToTable("Actors");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.ApplicationUser", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("Address")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers", (string)null);
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.ApplicationUserOTP", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ApplicationUserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreateAt")
                    .HasColumnType("datetime2");

                b.Property<bool>("IsValid")
                    .HasColumnType("bit");

                b.Property<string>("OTP")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("ValidTo")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("ApplicationUserId");

                b.ToTable("ApplicationUserOTP");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Category", b =>
            {
                b.Property<int>("CategoryId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("CategoryId");

                b.ToTable("Categories");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Cinema", b =>
            {
                b.Property<int>("CinemaId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaId"));

                b.Property<string>("Img")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("CinemaId");

                b.ToTable("Cinemas");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Movie", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("CategoryId")
                    .HasColumnType("int");

                b.Property<int>("CinemaId")
                    .HasColumnType("int");

                b.Property<DateTime>("DateTime")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("MainImg")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<decimal>("Price")
                    .HasPrecision(10, 2)
                    .HasColumnType("decimal(10,2)");

                b.Property<bool>("Status")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("CinemaId");

                b.ToTable("Movies");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.MovieActor", b =>
            {
                b.Property<int>("MovieId")
                    .HasColumnType("int");

                b.Property<int>("ActorId")
                    .HasColumnType("int");

                b.HasKey("MovieId", "ActorId");

                b.HasIndex("ActorId");

                b.ToTable("MovieActors");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.MovieSubImage", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Img")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("MovieId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("MovieId");

                b.ToTable("MovieSubImages");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.ApplicationUserOTP", b =>
            {
                b.HasOne("CinemaTicketSystem.Models.ApplicationUser", "ApplicationUser")
                    .WithMany()
                    .HasForeignKey("ApplicationUserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("ApplicationUser");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Movie", b =>
            {
                b.HasOne("CinemaTicketSystem.Models.Category", "Category")
                    .WithMany("Movies")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CinemaTicketSystem.Models.Cinema", "Cinema")
                    .WithMany("Movies")
                    .HasForeignKey("CinemaId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");

                b.Navigation("Cinema");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.MovieActor", b =>
            {
                b.HasOne("CinemaTicketSystem.Models.Actor", "Actor")
                    .WithMany("MovieActors")
                    .HasForeignKey("ActorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CinemaTicketSystem.Models.Movie", "Movie")
                    .WithMany("MovieActors")
                    .HasForeignKey("MovieId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Actor");

                b.Navigation("Movie");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.MovieSubImage", b =>
            {
                b.HasOne("CinemaTicketSystem.Models.Movie", "Movie")
                    .WithMany("MovieSubImages")
                    .HasForeignKey("MovieId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Movie");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Actor", b =>
            {
                b.Navigation("MovieActors");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Category", b =>
            {
                b.Navigation("Movies");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Cinema", b =>
            {
                b.Navigation("Movies");
            });

            modelBuilder.Entity("CinemaTicketSystem.Models.Movie", b =>
            {
                b.Navigation("MovieActors");

                b.Navigation("MovieSubImages");
            });
#pragma warning restore 612, 618
        }
    }
}
